import React, { useState, useEffect } from "react";
import {
  FormRow,
  FormRowSelect,
  FormRowMultiSelect,
  FormRowRadio,
} from "../assets/components";
import Wrapper from "../assets/wrappers/DashboardFormPage";
import { useLoaderData, useParams } from "react-router-dom";
import {
  TYPEPOSTURES,
  CHOOSEPOSTURES,
  TYPESTATUS,
  GENDER,
  RELATIONS,
  HAVECAREGIVER,
} from "../../../server/utils/constants";
import { Form, useNavigate, redirect } from "react-router-dom";
import { toast } from "react-toastify";
import customFetch from "../utils/customFetch";

// Loader ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• patient ‡πÅ‡∏•‡∏∞‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• caregiver ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ merge ‡∏•‡∏á‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
export const loader = async ({ params }) => {
  console.log("üìå Loading patient with ID:", params._id);
  try {
    const { _id } = params;
    if (!_id) throw new Error("Invalid ID");

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• patient ‡∏à‡∏≤‡∏Å API
    const { data: patientData } = await customFetch.get(`/allusers/${_id}`);

    // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (TYPE_CGV1) ‡πÅ‡∏•‡∏∞‡∏°‡∏µ ID_card_number
    if (
      patientData.youhaveCaregiver === HAVECAREGIVER.TYPE_CGV1 &&
      patientData.ID_card_number
    ) {
      const { data: caregiverResponse } = await customFetch.get(
        `/caregiver/${patientData.ID_card_number}`
      );
      if (
        caregiverResponse &&
        caregiverResponse.status === "Ok" &&
        caregiverResponse.caregiver
      ) {
        // Merge ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏•‡∏á‡πÉ‡∏ô patientData ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á caregiver _id ‡∏î‡πâ‡∏ß‡∏¢
        patientData.ID_card_number =
          caregiverResponse.caregiver.ID_card_number;
        patientData.name = caregiverResponse.caregiver.name;
        patientData.surname = caregiverResponse.caregiver.surname;
        patientData.tel = caregiverResponse.caregiver.tel;
        if (
          caregiverResponse.caregiver.userRelationships &&
          caregiverResponse.caregiver.userRelationships.length > 0
        ) {
          patientData.userRelationships =
            caregiverResponse.caregiver.userRelationships[0].relationship;
        }
        // ‡πÄ‡∏Å‡πá‡∏ö caregiver _id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ update ‡πÉ‡∏ô action
        patientData.caregiverId = caregiverResponse.caregiver._id;
      }
    }
    return patientData;
  } catch (error) {
    toast.error(error.response?.data?.msg);
    return redirect("/dashboard/all-patient");
  }
};

// Action ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• patient ‡πÅ‡∏•‡∏∞ caregiver (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
export const action = async ({ request, params }) => {
  const { _id } = params;
  const formData = await request.formData();
  const data = Object.fromEntries(formData);

  data.physicalTherapy = data.physicalTherapy === "true";

  console.log("üìå _id:", _id);
  console.log("üöÄ Data sent to API:", data);

  try {
    if (!_id) throw new Error("Invalid ID");
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• patient
    await customFetch.patch(`/allusers/${_id}`, data);

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (TYPE_CGV1) ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API ‡∏Ç‡∏≠‡∏á caregiver
    if (data.youhaveCaregiver === HAVECAREGIVER.TYPE_CGV1) {
      const caregiverPayload = {
        ID_card_number: data.ID_card_number,
        name: data.name,
        surname: data.surname,
        tel: data.tel,
        Relationship: data.userRelationships,
        user: data.user, // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ field ‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
      };

      if (data.caregiverId) {
        await customFetch.patch(`/caregiver/${data.caregiverId}`, caregiverPayload);
      } else {
        await customFetch.post(`/caregiver`, caregiverPayload);
      }
    }

    toast.success("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
    return redirect("/dashboard/all-patient");
  } catch (error) {
    toast.error(error?.response?.data?.msg);
    return error;
  }
};


const EditPatient = () => {
  const { patient, caregiver } = useLoaderData();

  // Format the birthday for the date input (YYYY-MM-DD format)
  const formatBirthday = (dateString) => {
    if (!dateString) return "";

    try {
      // Try to parse the date and format it as YYYY-MM-DD
      const date = new Date(dateString);
      if (isNaN(date.getTime())) return ""; // Invalid date

      // Format as YYYY-MM-DD
      const formattedDate = date.toISOString().split('T')[0];
      console.log("Original birthday:", dateString);
      console.log("Formatted birthday:", formattedDate);
      return formattedDate;
    } catch (error) {
      console.error("Error formatting birthday:", error);
      return "";
    }
  };

  const navigation = useNavigate();
  const isSubmitting = navigation.state === "submitting";
  const [selectedgender, setSelectedgender] = useState(
    patient.gender || ""
  );
  const [selectedUserType, setSelectedUserType] = useState(
    patient.userType || ""
  );
  const [selectedUserPosts, setSelectedUserPosts] = useState(
    patient.userPosts || []
  );
  const [selectedUserStatus, setSelectedUserStatus] = useState(
    patient.userStatus || ""
  );
  const [postures, setPostures] = useState([]);
  // Initialize birthday with formatted date
  const [birthday, setBirthday] = useState(formatBirthday(patient.birthday));

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•
  // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ caregiver ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô patient.youhaveCaregiver ‡∏´‡∏£‡∏∑‡∏≠ prompt
  const initialHaveCaregiver = caregiver
    ? HAVECAREGIVER.TYPE_CGV1
    : patient.youhaveCaregiver || "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?";
  const [selectedYouhaveCaregiver, setSelectedYouhaveCaregiver] = useState(initialHaveCaregiver);
  const [caregiverIDCard, setCaregiverIDCard] = useState(caregiver?.ID_card_number || "");
  const [caregiverName, setCaregiverName] = useState(caregiver?.name || "");
  const [caregiverSurname, setCaregiverSurname] = useState(caregiver?.surname || "");
  const [caregiverTel, setCaregiverTel] = useState(caregiver?.tel || "");
  const [caregiverRelationship, setCaregiverRelationship] = useState(
    caregiver?.userRelationships?.[0]?.relationship || ""
  );

  const [patientData, setPatientData] = useState({
    ...patient, // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å `patient`
    physicalTherapy: patient.physicalTherapy, // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  });
  // Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•
  const handleYouhaveCaregiverChange = (event) => {
    setSelectedYouhaveCaregiver(event.target.value);
  };

  const handleCaregiverRelationshipChange = (event) => {
    setSelectedCaregiverRelationship(event.target.value);
  };

  useEffect(() => {
    const fetchPostures = async () => {
      try {
        const { data } = await customFetch.get("/postures");
        setPostures(data.postures);
      } catch (error) {
        toast.error(error?.response?.data?.msg);
      }
    };
    fetchPostures();
  }, []);

  const handleUserTypeChange = (event) => {
    setSelectedgender(event.target.value);
    setSelectedUserType(event.target.value);
    setSelectedUserStatus(event.target.value);
    setSelectedYouhaveCaregiver(event.target.value);
  };

  const handleBirthdayChange = (event) => {
    console.log("Birthday changed to:", event.target.value);
    setBirthday(event.target.value);
  };

  const handleUserPostsChange = (selectedOptions) => {
    setSelectedUserPosts(selectedOptions.map((option) => option.value));
  };

  const handleRelationChange = (event) => {
    setSelectedRelation(event.target.value);
  };

  const handleOtherRelationChange = (event) => {
    setOtherRelation(event.target.value);
  };

  const handleUserStatusChange = (event) => {
    const newStatus = event.target.value;
    setSelectedUserStatus(newStatus);

    // ‡∏ñ‡πâ‡∏≤ userStatus ‡πÄ‡∏õ‡πá‡∏ô "‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤" ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á physicalTherapy ‡πÄ‡∏õ‡πá‡∏ô false
    setPatientData((prevData) => ({
      ...prevData,
      userStatus: newStatus,
      physicalTherapy: newStatus === TYPESTATUS.TYPE_ST2 ? false : true,
    }));
  };

  return (
    <Wrapper>
      <Form method="post" className="form">
        <h4 className="form-title">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ</h4>
        <div className="form-center">
          {/* Hidden input ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ birthday ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ */}
          <input type="hidden" name="birthday" value={birthday} />

          <input type="hidden" name="physicalTherapy" value={patientData.physicalTherapy ? "true" : "false"} />

          {patient.caregiverId && (
            <input type="hidden" name="caregiverId" value={patient.caregiverId} />
          )}

          <input type="hidden" name="user" value={patient.user || "defaultUserId"} />



          <FormRow
            type="text"
            name="ID_card_number"
            labelText="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"
            pattern="[0-9]*"
            defaultValue={patient.ID_card_number}
          />

          <div className="row">
            <div className="column1">
              {/* <FormRow
                type="text"
                name="idPatient"
                labelText="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢"
                pattern="[0-9]*"
                defaultValue={patient.idPatient}
              /> */}
              <FormRow
                type="text"
                name="name"
                labelText="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢"
                defaultValue={patient.name}
              />
              {/* <FormRow
                type="text"
                name="sickness"
                labelText="‡πÇ‡∏£‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢"
                defaultValue={patient.sickness}
              /> */}
              <FormRowSelect
                labelText="‡πÄ‡∏û‡∏®"
                name="gender"
                value={selectedgender}
                onChange={handleUserTypeChange}
                list={Object.values(GENDER)}
                defaultValue={patient.gender}
              />
              <FormRow
                type="text"
                name="email"
                labelText="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
                defaultValue={patient.email}
              />
              <FormRow
                type="text"
                name="nationality"
                labelText="‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏¥"
                defaultValue={patient.nationality}
              />
              <FormRow
                type="text"
                name="tel"
                labelText="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"
                defaultValue={patient.tel}
              />
            </div>

            <div className="column2">
              <FormRow
                type="text"
                name="username"
                labelText="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
                defaultValue={patient.username}
              />
              <FormRow
                type="text"
                name="surname"
                labelText="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢"
                defaultValue={patient.surname}
              />

              <FormRowSelect
                labelText="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ"
                name="userStatus"
                value={selectedUserStatus}
                onChange={handleUserStatusChange}
                list={Object.values(TYPESTATUS)}
                defaultValue={patient.userStatus}
              />

              <FormRow
                type="date"
                name="birthdayDisplay"
                labelText="‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î"
                value={birthday}
                onChange={handleBirthdayChange}
              />
              <FormRow
                type="text"
                name="Address"
                labelText="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà"
                defaultValue={patient.Address}
              />
            </div>
          </div>

          {/* <FormRowMultiSelect
            name="userPosts"
            labelText="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î"
            value={selectedUserPosts}
            options={["‡∏ó‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", ...postures.map((p) => p.namePostures)]}
            defaultValue={patient.userPosts}
            onChange={handleUserPostsChange}
          /> */}

          <hr />
          <br />

          <br />
          {/* ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• */}
          <h4 className="form-title">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•</h4>
          <div className="form-center">
            <FormRowSelect
              labelText="‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"
              name="youhaveCaregiver"
              value={selectedYouhaveCaregiver}
              onChange={handleYouhaveCaregiverChange}
              list={[
                "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
                ...Object.values(HAVECAREGIVER),
              ]}
              defaultValue={selectedYouhaveCaregiver}
            />

            {selectedYouhaveCaregiver === HAVECAREGIVER.TYPE_CGV1 && (
              <div className="row">
                <div className="column1">
                  <FormRow
                    type="text"
                    name="caregiverID_card_number"
                    labelText="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•)"
                    defaultValue={caregiver?.ID_card_number || ""}
                  />
                  <FormRow
                    type="text"
                    name="caregiverName"
                    labelText="‡∏ä‡∏∑‡πà‡∏≠ (‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•)"
                    defaultValue={caregiver?.name || ""}
                  />
                  <FormRow
                    type="text"
                    name="caregiverSurname"
                    labelText="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•)"
                    defaultValue={caregiver?.surname || ""}
                  />
                  <FormRow
                    type="tel"
                    name="caregiverTel"
                    labelText="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•)"
                    defaultValue={caregiver?.tel || ""}
                  />
                  <FormRowSelect
                    labelText="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå"
                    name="caregiverRelationship"
                    value={caregiver?.userRelationships?.[0]?.relationship || ""}
                    onChange={handleCaregiverRelationshipChange}
                    list={Object.values(RELATIONS)}
                    defaultValue={caregiver?.userRelationships?.[0]?.relationship || ""}
                  />

                </div>
              </div>
            )}
          </div>

          {/* <br /> */}
          <button
            type="submit"
            className="btn btn-block form-btn"
            disabled={isSubmitting}
          >
            {isSubmitting ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å" : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"}
          </button>

        </div>
      </Form>
    </Wrapper>
  );
};
export default EditPatient;
